object
runtime typed object
function
lambda
local function
bin op function
extension function
module
module block
while
foreach
if
let
match
test

if boolean {
}
elseif boolean {
}
else {
}

while boolean {
    continue;
    break;
}

foreach let x in y  {
    continue;
    break;
}

let x = y;

match x {
    Blah { y, z, w = 2 } => ... ,
    5 => ...,
    "blah" => ...,
    true => ...,
    { y, z, w = 1 } => ..., 
    _ => ...,
}

let z = { a = expr
        , b = expr
        }

let z = Blarg { a = expr
              , b = expr
              }

fun x( y, z, w ) {
}

fun x( y, z, w ) => expr;

fun (x, y, z) {
}

fun (x, y, z) => expr

bin *(a, b) [r,0] => expr;

bin *(a, b) [l,10] {
}

una !(a) [0] => a.Neg();
una !(b) [10] {
}

post !(a) [0] => expr;
post !(b) [10] {
}

ext blah( x, y, z ) => expr;

ext blah( x, y, z ) {
}

type Blah;

mod X.Y.Z {
    type Blah;
    fun blah( x, y, z ) => Blah { x, y, z };
    pub type Ikky;
    pub let z = { y = 4 };
}

use X.Y.Z;

use X.Y.Z {

}

test Blah {

}

let x = [ 1, 2, 3 ];

let x = [ x = y, y = z ];


// iterator
runtime object Iterator with next function 
of type self -> IteratorResult { value : any , done : bool }
